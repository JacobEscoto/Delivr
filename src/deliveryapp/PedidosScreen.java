package deliveryapp;

import java.awt.Color;
import javax.swing.JOptionPane;

public class PedidosScreen extends javax.swing.JPanel {

    Metodos mt = new Metodos();

    public PedidosScreen() {
        initComponents();
        for (Paquete paquete : Dashboard.paquetes) {
            packBox.addItem("ID: " + paquete.getIdPaquete() + " | Categoria: " + paquete.getCategoria() + "| Peso: " + paquete.getPeso() + " | Cliente: " + paquete.getCliente().getNombre() + " " + paquete.getCliente().getApellido());
        }
        for (Repartidor repartidor : Dashboard.repartidores) {
            repBox.addItem("Nombre: " + repartidor.getNombre() + " - " + repartidor.getIdRepartidor() + " | Vehiculo: " + repartidor.getVehiculo());
        }
        packLbl.setVisible(false);
        packBox.setVisible(false);
        repLbl.setVisible(false);
        repBox.setVisible(false);
        registerBtn.setVisible(false);
        coordX.setVisible(false);
        coordY.setVisible(false);
        coordXField.setVisible(false);
        coordYField.setVisible(false);
        enviarBtn.setVisible(false);
        scrollPane.setVisible(false);
        listPedidos.setVisible(false);
        mapBtn.setVisible(false);
        pedidoLbl.setVisible(false);
        pedidoBox.setVisible(false);
        enviarBtn.setVisible(false);

    }
    
    public String factura(Pedido pedido) {
        String factura = "======================= FACTURA =======================";
        factura += "\nCLIENTE: \t" + pedido.getPaquete().getCliente().getNombre() + " " + pedido.getPaquete().getCliente().getApellido();
        factura += "\nREPARTIDOR: \t" + pedido.getRepartidor().getNombre() + " | " + pedido.getRepartidor().getVehiculo();
        factura += "\nDIRECCION: \t" + pedido.getPaquete().getCliente().getDireccion();
        factura += "\nESTADO: \t" + pedido.getEstado();
        factura += "\n=======================================================";
        factura += "\nTOTAL: \tLps. " + pedido.getTotal();
        factura += "\n=======================================================";
        return factura;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addBtn = new javax.swing.JButton();
        sendBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        listBtn = new javax.swing.JButton();
        mapBtn = new javax.swing.JButton();
        packBox = new javax.swing.JComboBox<>();
        repBox = new javax.swing.JComboBox<>();
        packLbl = new javax.swing.JLabel();
        repLbl = new javax.swing.JLabel();
        enviarBtn = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        listPedidos = new javax.swing.JTextArea();
        coordX = new javax.swing.JLabel();
        coordY = new javax.swing.JLabel();
        coordXField = new javax.swing.JTextField();
        coordYField = new javax.swing.JTextField();
        registerBtn = new javax.swing.JButton();
        pedidoBox = new javax.swing.JComboBox<>();
        pedidoLbl = new javax.swing.JLabel();

        setBackground(new java.awt.Color(19, 28, 38));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(766, 488));
        setMinimumSize(new java.awt.Dimension(766, 488));

        addBtn.setBackground(new java.awt.Color(31, 114, 193));
        addBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setText("Agregar Pedido");
        addBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        sendBtn.setBackground(new java.awt.Color(31, 114, 193));
        sendBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        sendBtn.setForeground(new java.awt.Color(255, 255, 255));
        sendBtn.setText("Enviar Pedido");
        sendBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(31, 114, 193));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn.setText("Buscar Pedido");
        searchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        listBtn.setBackground(new java.awt.Color(31, 114, 193));
        listBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        listBtn.setForeground(new java.awt.Color(255, 255, 255));
        listBtn.setText("Lista de Pedidos");
        listBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listBtnActionPerformed(evt);
            }
        });

        mapBtn.setBackground(new Color(0, 0, 0, 0));
        mapBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mapBtn.setForeground(new java.awt.Color(255, 255, 255));
        mapBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/map2.png"))); // NOI18N
        mapBtn.setText("Ver Pedido");
        mapBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mapBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mapBtn.setMaximumSize(new java.awt.Dimension(32, 32));
        mapBtn.setMinimumSize(new java.awt.Dimension(32, 32));
        mapBtn.setPreferredSize(new java.awt.Dimension(32, 32));
        mapBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapBtnActionPerformed(evt);
            }
        });

        packBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        packBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packBoxActionPerformed(evt);
            }
        });

        repBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        packLbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        packLbl.setForeground(new java.awt.Color(255, 255, 255));
        packLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        packLbl.setText("Paquete");

        repLbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        repLbl.setForeground(new java.awt.Color(255, 255, 255));
        repLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        repLbl.setText("Repartidor");

        enviarBtn.setBackground(new java.awt.Color(31, 114, 193));
        enviarBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        enviarBtn.setForeground(new java.awt.Color(255, 255, 255));
        enviarBtn.setText("Entregar");
        enviarBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        enviarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarBtnActionPerformed(evt);
            }
        });

        listPedidos.setBackground(new java.awt.Color(19, 28, 38));
        listPedidos.setColumns(20);
        listPedidos.setForeground(new java.awt.Color(255, 255, 255));
        listPedidos.setRows(5);
        listPedidos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ENTREGAS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        scrollPane.setViewportView(listPedidos);

        coordX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        coordX.setForeground(new java.awt.Color(255, 255, 255));
        coordX.setText("Coordenada X:");

        coordY.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        coordY.setForeground(new java.awt.Color(255, 255, 255));
        coordY.setText("Coordenada Y:");

        registerBtn.setBackground(new java.awt.Color(31, 114, 193));
        registerBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        registerBtn.setForeground(new java.awt.Color(255, 255, 255));
        registerBtn.setText("Registrar");
        registerBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        pedidoBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        pedidoBox.setMaximumSize(new java.awt.Dimension(72, 22));
        pedidoBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidoBoxActionPerformed(evt);
            }
        });

        pedidoLbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pedidoLbl.setForeground(new java.awt.Color(255, 255, 255));
        pedidoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pedidoLbl.setText("Pedido");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPane)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sendBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(listBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(packLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(repLbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(repBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(packBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(pedidoBox, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(coordX)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(coordXField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(coordY)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(coordYField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(enviarBtn)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(pedidoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(147, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mapBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(registerBtn)
                        .addGap(334, 334, 334))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(sendBtn)
                    .addComponent(searchBtn)
                    .addComponent(listBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(repLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerBtn)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pedidoBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pedidoLbl))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coordXField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coordX)
                    .addComponent(coordY)
                    .addComponent(coordYField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enviarBtn))
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mapBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        if (Dashboard.clientes.isEmpty() || Dashboard.repartidores.isEmpty() || Dashboard.paquetes.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay Cliente/Repartidor/Paquetes registrados todavia", "WARNING", JOptionPane.WARNING_MESSAGE);
        } else {
            repLbl.setVisible(true);
            repBox.setVisible(true);
            packLbl.setVisible(true);
            packBox.setVisible(true);
            registerBtn.setVisible(true);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        packLbl.setVisible(false);
        packBox.setVisible(false);
        repLbl.setVisible(false);
        repBox.setVisible(false);
        registerBtn.setVisible(false);
        coordX.setVisible(false);
        coordY.setVisible(false);
        coordXField.setVisible(false);
        coordYField.setVisible(false);
        enviarBtn.setVisible(false);
        scrollPane.setVisible(false);
        listPedidos.setVisible(false);
        mapBtn.setVisible(false);
        pedidoLbl.setVisible(false);
        pedidoBox.setVisible(false);
        enviarBtn.setVisible(false);
        if (Dashboard.pedidos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay pedidos registrados", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
        } else {
            for (Pedido pedido: Dashboard.pedidos) {
                if (pedido.getEstado().equalsIgnoreCase("pendiente")) {
                    pedidoBox.addItem(pedido.toString());
                }  
            }
            pedidoLbl.setVisible(true);
            pedidoBox.setVisible(true);
            coordX.setVisible(true);
            coordY.setVisible(true);
            coordXField.setVisible(true);
            coordYField.setVisible(true);
            enviarBtn.setVisible(true);
            
        }
    }//GEN-LAST:event_sendBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        if (Dashboard.pedidos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay pedidos registrados", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
        } else {
            String buscar = JOptionPane.showInputDialog(this, "Ingrese ID del Pedido a buscar:");
            
            do {
                buscar = JOptionPane.showInputDialog(this, "Intente de nuevo:");
            } while (buscar.isEmpty() || buscar.equals(" "));
            
            boolean encontrado = false;
            String resultado = "";
            for (int i = 0; i < Dashboard.pedidos.size(); i++) {
                Pedido pedido = Dashboard.pedidos.get(i);
                if (pedido.getIdPedido().equals(buscar)) {
                    resultado += pedido;
                    encontrado = true;
                    break;
                }
            }
            
            if(!encontrado) {
                JOptionPane.showMessageDialog(this, "No se encontro pedido con el ID proporcionado\nAsegura que ingresaste el ID correctamente", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, resultado, "ENCONTRADO", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void listBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listBtnActionPerformed
        packLbl.setVisible(false);
        packBox.setVisible(false);
        repLbl.setVisible(false);
        repBox.setVisible(false);
        registerBtn.setVisible(false);
        coordX.setVisible(false);
        coordY.setVisible(false);
        coordXField.setVisible(false);
        coordYField.setVisible(false);
        enviarBtn.setVisible(false);
        scrollPane.setVisible(false);
        listPedidos.setVisible(false);
        mapBtn.setVisible(false);
        pedidoLbl.setVisible(false);
        pedidoBox.setVisible(false);
        enviarBtn.setVisible(false);
        if (Dashboard.pedidos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay pedidos registrados", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
        } else {
            String lista = "";
            for (int i = 0; i < Dashboard.pedidos.size(); i++) {
                Pedido listaP = Dashboard.pedidos.get(i);
                lista += (i +1) + ") " + listaP + "\n";
            }
            scrollPane.setVisible(true);
            listPedidos.setText(lista);
            listPedidos.setEditable(false);
            listPedidos.setVisible(true);
        }
    }//GEN-LAST:event_listBtnActionPerformed

    private void mapBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapBtnActionPerformed
        String mapa = "";
        int x = Integer.parseInt(coordXField.getText());
       int y = Integer.parseInt(coordYField.getText());
        for (int i = 0; i < Dashboard.mapa.length; i++) {
            for (int j = 0; j < Dashboard.mapa[i].length; j++) {
                Dashboard.mapa[i][j] = ' ';
                Dashboard.mapa[0][0] = 'R';
                Dashboard.mapa[x][y] = 'C';
                mapa += " [ " + Dashboard.mapa[i][j] + " ] ";
            }
            mapa += "\n";
        }
        JOptionPane.showMessageDialog(this, mapa, "MAPA", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_mapBtnActionPerformed

    private void enviarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarBtnActionPerformed
        mapBtn.setVisible(true);
        int x, y;
        boolean enviado = true;
        Pedido pedido = null;
        String coordX = coordXField.getText();
        String coordY = coordYField.getText();
        if (coordX.isEmpty() || coordX.equals(" ")) {
            enviado = false;
        } else {
            x = Integer.parseInt(coordX);
            x -= 1;
            if( x < 0 || x > 14) {
                enviado = false;
            }
        }
        if (coordY.isEmpty() || coordY.equals(" ")) {
            enviado = false;
        } else {
            y = Integer.parseInt(coordX);
            y -= 1;
            if (y < 0 || y > 14) {
                enviado = false;
            }
        }
        String entradaPedido = pedidoBox.getSelectedItem().toString();
        if (entradaPedido.isEmpty() || entradaPedido.equals(" ")) {
            enviado = false;
            
        }
        String searchIdP = entradaPedido.substring(entradaPedido.indexOf("Paquete: ") + 10, entradaPedido.indexOf(" | Repartidor:"));
        System.out.println(searchIdP);
        for (int i = 0; i < Dashboard.pedidos.size(); i++) {
            pedido = Dashboard.pedidos.get(i);
            if (pedido.getPaquete().getIdPaquete().equals(searchIdP)) {
                enviado = true;
                break;
            }
        }
        if (pedido == null) {
            JOptionPane.showMessageDialog(this, "No elegiste un pedido para enviar", "WARNING", JOptionPane.WARNING_MESSAGE);
            enviado = false;
        }
        
        if(!enviado) {
            JOptionPane.showMessageDialog(this, "No se puede enviar el pedido", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            pedido.entregarPedido();
            String factura = factura(pedido);
            JOptionPane.showMessageDialog(this, factura, "ENVIADO", JOptionPane.PLAIN_MESSAGE);
            for (Pedido actualizar: Dashboard.pedidos) {
                if (actualizar.getEstado().equalsIgnoreCase("pendiente")) {
                    pedidoBox.addItem(pedido.toString());
                }  
            }
        }
    }//GEN-LAST:event_enviarBtnActionPerformed

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        boolean registrado = true;
        Paquete paquete = null;
        Repartidor repartidor = null;
        String paqueteSeleccionado = packBox.getSelectedItem().toString();
        String repSeleccionado = repBox.getSelectedItem().toString();
        if (paqueteSeleccionado.equals(" ") || paqueteSeleccionado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No seleccionaste un paquete", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            registrado = false;
            return;
        } else if (repSeleccionado.equals(" ") || repSeleccionado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No seleccionaste un repartidor", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            registrado = false;
            return;
        }
        String searchPack = paqueteSeleccionado.substring(paqueteSeleccionado.indexOf("ID: ") + 4, paqueteSeleccionado.indexOf("| Categoria") - 1);
        System.out.println(searchPack);
        for (int i = 0; i < Dashboard.paquetes.size(); i++) {
            Paquete registerPack = Dashboard.paquetes.get(i);
            if (registerPack.getIdPaquete().equals(searchPack)) {
                paquete = registerPack;
                registrado = true;
                break;
            }
        }
        String searchRep = repSeleccionado.substring(repSeleccionado.indexOf("- ") + 2, repSeleccionado.indexOf("| Vehiculo") - 1);
        System.out.println(searchRep);
        for (int i = 0; i < Dashboard.repartidores.size(); i++) {
            Repartidor registerRep = Dashboard.repartidores.get(i);
            if (registerRep.getIdRepartidor().equals(searchRep)) {
                repartidor = registerRep;
                registrado = true;
                break;
            }
        }

        if (paquete == null) {
            registrado = false;
            JOptionPane.showMessageDialog(this, "No registraste un paquete (null)", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
        } else if (repartidor == null) {
            registrado = false;
            JOptionPane.showMessageDialog(this, "No agregaste un repartidor (null)", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
        }

        if (!registrado) {
            JOptionPane.showMessageDialog(this, "No se pudo registrar el pedido", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            String idPedido = mt.generarId("");
            double pesoCaja = paquete.pesoCaja(paquete.getCategoria());
            double subTotal = 0;
            if (pesoCaja > paquete.getPeso()) {
                subTotal = mt.subTotal(pesoCaja);
            } else {
                subTotal = mt.subTotal(paquete.getPeso());
            }
            
            double total = mt.costoTotal(subTotal, paquete.getPeso(), paquete.getCliente().getEdad(), paquete.getIncluirSeguro());
            Pedido pedido = new Pedido(idPedido, paquete, repartidor, total);
            Dashboard.pedidos.add(pedido);
            JOptionPane.showMessageDialog(this, "Se registro el pedido con exito", "EXITO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_registerBtnActionPerformed

    private void packBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_packBoxActionPerformed

    private void pedidoBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidoBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pedidoBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel coordX;
    private javax.swing.JTextField coordXField;
    private javax.swing.JLabel coordY;
    private javax.swing.JTextField coordYField;
    private javax.swing.JButton enviarBtn;
    private javax.swing.JButton listBtn;
    private javax.swing.JTextArea listPedidos;
    private javax.swing.JButton mapBtn;
    private javax.swing.JComboBox<String> packBox;
    private javax.swing.JLabel packLbl;
    private javax.swing.JComboBox<String> pedidoBox;
    private javax.swing.JLabel pedidoLbl;
    private javax.swing.JButton registerBtn;
    private javax.swing.JComboBox<String> repBox;
    private javax.swing.JLabel repLbl;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables
}
